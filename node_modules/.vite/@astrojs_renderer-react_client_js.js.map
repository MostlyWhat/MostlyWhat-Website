{
  "version": 3,
  "sources": ["../@astrojs/renderer-react/client.js", "../@astrojs/renderer-react/static-html.js", "dep:@astrojs_renderer-react_client_js"],
  "sourcesContent": ["import { createElement } from 'react';\nimport { hydrate } from 'react-dom';\nimport StaticHtml from './static-html.js';\n\nexport default (element) => (Component, props, children) =>\n  hydrate(\n    createElement(\n      Component,\n      { ...props, suppressHydrationWarning: true },\n      children != null ? createElement(StaticHtml, { value: children, suppressHydrationWarning: true }) : children\n    ),\n    element\n  );\n", "import { createElement as h } from 'react';\n\n/**\n * Astro passes `children` as a string of HTML, so we need\n * a wrapper `div` to render that content as VNodes.\n *\n * As a bonus, we can signal to React that this subtree is\n * entirely static and will never change via `shouldComponentUpdate`.\n */\nconst StaticHtml = ({ value }) => {\n  if (!value) return null;\n  return h('astro-fragment', { suppressHydrationWarning: true, dangerouslySetInnerHTML: { __html: value } });\n};\n\n/**\n * This tells React to opt-out of re-rendering this subtree,\n * In addition to being a performance optimization,\n * this also allows other frameworks to attach to `children`.\n *\n * See https://preactjs.com/guide/v8/external-dom-mutations\n */\nStaticHtml.shouldComponentUpdate = () => false;\n\nexport default StaticHtml;\n", "import d from \"./node_modules/@astrojs/renderer-react/client.js\";export default d;"],
  "mappings": ";;;;;;;;;;;;;AAAA,oBAA8B;AAC9B,uBAAwB;;;ACDxB,mBAAmC;AASnC,IAAM,aAAa,CAAC,EAAE,YAAY;AAChC,MAAI,CAAC;AAAO,WAAO;AACnB,SAAO,gCAAE,kBAAkB,EAAE,0BAA0B,MAAM,yBAAyB,EAAE,QAAQ;AAAA;AAUlG,WAAW,wBAAwB,MAAM;AAEzC,IAAO,sBAAQ;;;ADnBf,IAAO,iBAAQ,CAAC,YAAY,CAAC,WAAW,OAAO,aAC7C,8BACE,iCACE,WACA,iCAAK,QAAL,EAAY,0BAA0B,SACtC,YAAY,OAAO,iCAAc,qBAAY,EAAE,OAAO,UAAU,0BAA0B,UAAU,WAEtG;;;AEX6D,IAAO,2CAAQ;",
  "names": []
}
