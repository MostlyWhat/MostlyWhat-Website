import { STYLE_EXTENSIONS } from "../core/ssr/css.js";
import * as path from "path";
import esbuild from "esbuild";
const PLUGIN_NAME = "@astrojs/rollup-plugin-build-css";
const ASTRO_STYLE_PREFIX = "@astro-inline-style";
const ASTRO_PAGE_STYLE_PREFIX = "@astro-page-all-styles";
const isCSSRequest = (request) => STYLE_EXTENSIONS.has(path.extname(request));
function getAstroPageStyleId(pathname) {
  let styleId = ASTRO_PAGE_STYLE_PREFIX + pathname;
  if (styleId.endsWith("/")) {
    styleId += "index";
  }
  styleId += ".js";
  return styleId;
}
function getAstroStyleId(pathname) {
  let styleId = ASTRO_STYLE_PREFIX + pathname;
  if (styleId.endsWith("/")) {
    styleId += "index";
  }
  styleId += ".css";
  return styleId;
}
function getAstroStylePathFromId(id) {
  return id.substr(ASTRO_STYLE_PREFIX.length + 1);
}
function isStyleVirtualModule(id) {
  return id.startsWith(ASTRO_STYLE_PREFIX);
}
function isPageStyleVirtualModule(id) {
  return id.startsWith(ASTRO_PAGE_STYLE_PREFIX);
}
function rollupPluginAstroBuildCSS(options) {
  const { astroPageStyleMap, astroStyleMap, chunkToReferenceIdMap, pureCSSChunks } = options;
  const styleSourceMap = new Map();
  return {
    name: PLUGIN_NAME,
    configResolved(resolvedConfig) {
      const plugins = resolvedConfig.plugins;
      const viteCSSPostIndex = resolvedConfig.plugins.findIndex((p) => p.name === "vite:css-post");
      if (viteCSSPostIndex !== -1) {
        const viteCSSPost = plugins[viteCSSPostIndex];
        delete viteCSSPost.renderChunk;
        delete viteCSSPost.generateBundle;
        const ourIndex = plugins.findIndex((p) => p.name === PLUGIN_NAME);
        const ourPlugin = plugins[ourIndex];
        plugins.splice(ourIndex, 1);
        plugins.splice(viteCSSPostIndex - 1, 0, ourPlugin);
      }
    },
    async resolveId(id) {
      if (isPageStyleVirtualModule(id)) {
        return id;
      }
      if (isStyleVirtualModule(id)) {
        return id;
      }
      return void 0;
    },
    async load(id) {
      if (isPageStyleVirtualModule(id)) {
        return astroPageStyleMap.get(id) || null;
      }
      if (isStyleVirtualModule(id)) {
        return astroStyleMap.get(id) || null;
      }
      return null;
    },
    async transform(value, id) {
      if (isStyleVirtualModule(id)) {
        styleSourceMap.set(id, value);
      }
      if (isCSSRequest(id)) {
        styleSourceMap.set(id, value);
      }
      return null;
    },
    async renderChunk(_code, chunk) {
      let chunkCSS = "";
      let isPureCSS = true;
      for (const [id] of Object.entries(chunk.modules)) {
        if (!isCSSRequest(id) && !isPageStyleVirtualModule(id)) {
          isPureCSS = false;
        }
        if (styleSourceMap.has(id)) {
          chunkCSS += styleSourceMap.get(id);
        }
      }
      if (isPureCSS) {
        const { code: minifiedCSS } = await esbuild.transform(chunkCSS, {
          loader: "css",
          minify: true
        });
        const referenceId = this.emitFile({
          name: chunk.name + ".css",
          type: "asset",
          source: minifiedCSS
        });
        pureCSSChunks.add(chunk);
        chunkToReferenceIdMap.set(chunk.fileName, referenceId);
      }
      return null;
    },
    generateBundle(opts, bundle) {
      if (pureCSSChunks.size) {
        const pureChunkFilenames = new Set([...pureCSSChunks].map((chunk) => chunk.fileName));
        const emptyChunkFiles = [...pureChunkFilenames].map((file) => path.basename(file)).join("|").replace(/\./g, "\\.");
        const emptyChunkRE = new RegExp(opts.format === "es" ? `\\bimport\\s*"[^"]*(?:${emptyChunkFiles})";
?` : `\\brequire\\(\\s*"[^"]*(?:${emptyChunkFiles})"\\);
?`, "g");
        for (const [chunkId, chunk] of Object.entries(bundle)) {
          if (chunk.type === "chunk") {
            if (pureCSSChunks.has(chunk)) {
              delete bundle[chunkId];
            } else {
              chunk.code = chunk.code.replace(emptyChunkRE, (m) => `/* empty css ${"".padEnd(m.length - 15)}*/`);
            }
          }
        }
      }
    }
  };
}
export {
  getAstroPageStyleId,
  getAstroStyleId,
  getAstroStylePathFromId,
  rollupPluginAstroBuildCSS
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vc3JjL3ZpdGUtcGx1Z2luLWJ1aWxkLWNzcy9pbmRleC50cyJdLAogICJtYXBwaW5ncyI6ICJBQUdBO0FBQ0E7QUFDQTtBQUVBLE1BQU0sY0FBYztBQUdwQixNQUFNLHFCQUFxQjtBQUUzQixNQUFNLDBCQUEwQjtBQUVoQyxNQUFNLGVBQWUsQ0FBQyxZQUFvQixpQkFBaUIsSUFBSSxLQUFLLFFBQVE7QUFFckUsNkJBQTZCLFVBQWtCO0FBQ3BELE1BQUksVUFBVSwwQkFBMEI7QUFDeEMsTUFBSSxRQUFRLFNBQVMsTUFBTTtBQUN6QixlQUFXO0FBQUE7QUFFYixhQUFXO0FBQ1gsU0FBTztBQUFBO0FBR0YseUJBQXlCLFVBQWtCO0FBQ2hELE1BQUksVUFBVSxxQkFBcUI7QUFDbkMsTUFBSSxRQUFRLFNBQVMsTUFBTTtBQUN6QixlQUFXO0FBQUE7QUFFYixhQUFXO0FBQ1gsU0FBTztBQUFBO0FBR0YsaUNBQWlDLElBQVk7QUFDbEQsU0FBTyxHQUFHLE9BQU8sbUJBQW1CLFNBQVM7QUFBQTtBQUcvQyw4QkFBOEIsSUFBWTtBQUN4QyxTQUFPLEdBQUcsV0FBVztBQUFBO0FBR3ZCLGtDQUFrQyxJQUFZO0FBQzVDLFNBQU8sR0FBRyxXQUFXO0FBQUE7QUFVaEIsbUNBQW1DLFNBQW9DO0FBQzVFLFFBQU0sRUFBRSxtQkFBbUIsZUFBZSx1QkFBdUIsa0JBQWtCO0FBQ25GLFFBQU0saUJBQWlCLElBQUk7QUFFM0IsU0FBTztBQUFBLElBQ0wsTUFBTTtBQUFBLElBRU4sZUFBZSxnQkFBZ0I7QUFLN0IsWUFBTSxVQUFVLGVBQWU7QUFDL0IsWUFBTSxtQkFBbUIsZUFBZSxRQUFRLFVBQVUsQ0FBQyxNQUFNLEVBQUUsU0FBUztBQUM1RSxVQUFJLHFCQUFxQixJQUFJO0FBQzNCLGNBQU0sY0FBYyxRQUFRO0FBRzVCLGVBQU8sWUFBWTtBQUNuQixlQUFPLFlBQVk7QUFHbkIsY0FBTSxXQUFXLFFBQVEsVUFBVSxDQUFDLE1BQU0sRUFBRSxTQUFTO0FBQ3JELGNBQU0sWUFBWSxRQUFRO0FBRzFCLGdCQUFRLE9BQU8sVUFBVTtBQUN6QixnQkFBUSxPQUFPLG1CQUFtQixHQUFHLEdBQUc7QUFBQTtBQUFBO0FBQUEsVUFJdEMsVUFBVSxJQUFJO0FBQ2xCLFVBQUkseUJBQXlCLEtBQUs7QUFDaEMsZUFBTztBQUFBO0FBRVQsVUFBSSxxQkFBcUIsS0FBSztBQUM1QixlQUFPO0FBQUE7QUFFVCxhQUFPO0FBQUE7QUFBQSxVQUdILEtBQUssSUFBSTtBQUNiLFVBQUkseUJBQXlCLEtBQUs7QUFDaEMsZUFBTyxrQkFBa0IsSUFBSSxPQUFPO0FBQUE7QUFFdEMsVUFBSSxxQkFBcUIsS0FBSztBQUM1QixlQUFPLGNBQWMsSUFBSSxPQUFPO0FBQUE7QUFFbEMsYUFBTztBQUFBO0FBQUEsVUFHSCxVQUFVLE9BQU8sSUFBSTtBQUN6QixVQUFJLHFCQUFxQixLQUFLO0FBQzVCLHVCQUFlLElBQUksSUFBSTtBQUFBO0FBRXpCLFVBQUksYUFBYSxLQUFLO0FBQ3BCLHVCQUFlLElBQUksSUFBSTtBQUFBO0FBRXpCLGFBQU87QUFBQTtBQUFBLFVBR0gsWUFBWSxPQUFPLE9BQU87QUFDOUIsVUFBSSxXQUFXO0FBQ2YsVUFBSSxZQUFZO0FBQ2hCLGlCQUFXLENBQUMsT0FBTyxPQUFPLFFBQVEsTUFBTSxVQUFVO0FBQ2hELFlBQUksQ0FBQyxhQUFhLE9BQU8sQ0FBQyx5QkFBeUIsS0FBSztBQUN0RCxzQkFBWTtBQUFBO0FBRWQsWUFBSSxlQUFlLElBQUksS0FBSztBQUMxQixzQkFBWSxlQUFlLElBQUk7QUFBQTtBQUFBO0FBTW5DLFVBQUksV0FBVztBQUNiLGNBQU0sRUFBRSxNQUFNLGdCQUFnQixNQUFNLFFBQVEsVUFBVSxVQUFVO0FBQUEsVUFDOUQsUUFBUTtBQUFBLFVBQ1IsUUFBUTtBQUFBO0FBRVYsY0FBTSxjQUFjLEtBQUssU0FBUztBQUFBLFVBQ2hDLE1BQU0sTUFBTSxPQUFPO0FBQUEsVUFDbkIsTUFBTTtBQUFBLFVBQ04sUUFBUTtBQUFBO0FBRVYsc0JBQWMsSUFBSTtBQUNsQiw4QkFBc0IsSUFBSSxNQUFNLFVBQVU7QUFBQTtBQUc1QyxhQUFPO0FBQUE7QUFBQSxJQUlULGVBQWUsTUFBTSxRQUFRO0FBQzNCLFVBQUksY0FBYyxNQUFNO0FBQ3RCLGNBQU0scUJBQXFCLElBQUksSUFBSSxDQUFDLEdBQUcsZUFBZSxJQUFJLENBQUMsVUFBVSxNQUFNO0FBQzNFLGNBQU0sa0JBQWtCLENBQUMsR0FBRyxvQkFDekIsSUFBSSxDQUFDLFNBQVMsS0FBSyxTQUFTLE9BQzVCLEtBQUssS0FDTCxRQUFRLE9BQU87QUFDbEIsY0FBTSxlQUFlLElBQUksT0FBTyxLQUFLLFdBQVcsT0FBTyx5QkFBeUI7QUFBQSxLQUEwQiw2QkFBNkI7QUFBQSxJQUE0QjtBQUVuSyxtQkFBVyxDQUFDLFNBQVMsVUFBVSxPQUFPLFFBQVEsU0FBUztBQUNyRCxjQUFJLE1BQU0sU0FBUyxTQUFTO0FBQzFCLGdCQUFJLGNBQWMsSUFBSSxRQUFRO0FBRzVCLHFCQUFPLE9BQU87QUFBQSxtQkFDVDtBQUdMLG9CQUFNLE9BQU8sTUFBTSxLQUFLLFFBQ3RCLGNBRUEsQ0FBQyxNQUFNLGdCQUFnQixHQUFHLE9BQU8sRUFBRSxTQUFTO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7IiwKICAibmFtZXMiOiBbXQp9Cg==
