import MagicString from "magic-string";
import { walk } from "estree-walker";
function isSSR(options) {
  if (options === void 0) {
    return false;
  }
  if (typeof options === "boolean") {
    return options;
  }
  if (typeof options == "object") {
    return !!options.ssr;
  }
  return false;
}
const SUPPORTED_FILES = /\.(astro|svelte|vue|[cm]?js|jsx|[cm]?ts|tsx)$/;
const IGNORED_MODULES = [/astro\/dist\/runtime\/server/, /\/node-fetch\//];
const DEFINE_FETCH = `import fetch from 'node-fetch';
`;
function isIdentifier(node) {
  return node.type === "Identifier";
}
function pluginFetch() {
  return {
    name: "@astrojs/vite-plugin-fetch",
    enforce: "post",
    async transform(code, id, opts) {
      const ssr = isSSR(opts);
      if (!ssr) {
        return null;
      }
      if (!id.match(SUPPORTED_FILES)) {
        return null;
      }
      if (!code.includes("fetch")) {
        return null;
      }
      const ast = this.parse(code);
      let fetchDeclared = false;
      walk(ast, {
        enter(node, parent) {
          if (fetchDeclared)
            return this.skip();
          if (isIdentifier(node)) {
            if (node.name === "fetch" && !parent.type.endsWith("Expression")) {
              fetchDeclared = true;
            }
          }
        }
      });
      if (fetchDeclared) {
        return null;
      }
      for (const ignored of IGNORED_MODULES) {
        if (id.match(ignored)) {
          return null;
        }
      }
      const s = new MagicString(code);
      s.prepend(DEFINE_FETCH);
      const result = s.toString();
      const map = s.generateMap({
        source: id,
        includeContent: true
      });
      return { code: result, map };
    }
  };
}
export {
  pluginFetch as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vc3JjL3ZpdGUtcGx1Z2luLWZldGNoL2luZGV4LnRzIl0sCiAgIm1hcHBpbmdzIjogIkFBRUE7QUFDQTtBQUdBLGVBQWUsU0FBMEQ7QUFDdkUsTUFBSSxZQUFZLFFBQVc7QUFDekIsV0FBTztBQUFBO0FBRVQsTUFBSSxPQUFPLFlBQVksV0FBVztBQUNoQyxXQUFPO0FBQUE7QUFFVCxNQUFJLE9BQU8sV0FBVyxVQUFVO0FBQzlCLFdBQU8sQ0FBQyxDQUFDLFFBQVE7QUFBQTtBQUVuQixTQUFPO0FBQUE7QUFLVCxNQUFNLGtCQUFrQjtBQUN4QixNQUFNLGtCQUFrQixDQUFDLGdDQUFnQztBQUN6RCxNQUFNLGVBQWU7QUFBQTtBQUVyQixzQkFBc0IsTUFBb0M7QUFDeEQsU0FBTyxLQUFLLFNBQVM7QUFBQTtBQUdSLHVCQUErQjtBQUM1QyxTQUFPO0FBQUEsSUFDTCxNQUFNO0FBQUEsSUFDTixTQUFTO0FBQUEsVUFDSCxVQUFVLE1BQU0sSUFBSSxNQUFNO0FBQzlCLFlBQU0sTUFBTSxNQUFNO0FBRWxCLFVBQUksQ0FBQyxLQUFLO0FBQ1IsZUFBTztBQUFBO0FBR1QsVUFBSSxDQUFDLEdBQUcsTUFBTSxrQkFBa0I7QUFDOUIsZUFBTztBQUFBO0FBR1QsVUFBSSxDQUFDLEtBQUssU0FBUyxVQUFVO0FBQzNCLGVBQU87QUFBQTtBQUdULFlBQU0sTUFBTSxLQUFLLE1BQU07QUFDdkIsVUFBSSxnQkFBZ0I7QUFDcEIsV0FBSyxLQUFLO0FBQUEsUUFDUixNQUFNLE1BQU0sUUFBUTtBQUNsQixjQUFJO0FBQWUsbUJBQU8sS0FBSztBQUMvQixjQUFJLGFBQWEsT0FBTztBQUV0QixnQkFBSSxLQUFLLFNBQVMsV0FBVyxDQUFDLE9BQU8sS0FBSyxTQUFTLGVBQWU7QUFDaEUsOEJBQWdCO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFPeEIsVUFBSSxlQUFlO0FBQ2pCLGVBQU87QUFBQTtBQUlULGlCQUFXLFdBQVcsaUJBQWlCO0FBQ3JDLFlBQUksR0FBRyxNQUFNLFVBQVU7QUFDckIsaUJBQU87QUFBQTtBQUFBO0FBR1gsWUFBTSxJQUFJLElBQUksWUFBWTtBQUMxQixRQUFFLFFBQVE7QUFDVixZQUFNLFNBQVMsRUFBRTtBQUNqQixZQUFNLE1BQU0sRUFBRSxZQUFZO0FBQUEsUUFDeEIsUUFBUTtBQUFBLFFBQ1IsZ0JBQWdCO0FBQUE7QUFFbEIsYUFBTyxFQUFFLE1BQU0sUUFBUTtBQUFBO0FBQUE7QUFBQTsiLAogICJuYW1lcyI6IFtdCn0K
